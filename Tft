/*
 * TFT1.c
 *
 * Created: 27-07-2021 9.05.22 PM
 * Author : Gobinath M
 */ 

#include <avr/io.h>
#include <avr/pgmspace.h>
#define F_CPU 8000000UL
#include <util/delay.h>

#define CS 2
#define DC 1
#define MOSI 3
#define SCK 5

#define CASET 0x2A
#define RASET 0x2B 
#define RAMWR 0x2C

int const ysize = 240, xsize = 240, yoff = 60, xoff = 0, invert = 1, rotate = 0;
uint8_t x_origin, y_origin, font_size = 1;
uint16_t BG = 0XFFFF, FG = 0X0000; //background & foreground
const uint8_t CharMap[96][6] PROGMEM = {
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
	{ 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00 },
	{ 0x00, 0x07, 0x00, 0x07, 0x00, 0x00 },
	{ 0x14, 0x7F, 0x14, 0x7F, 0x14, 0x00 },
	{ 0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x00 },
	{ 0x23, 0x13, 0x08, 0x64, 0x62, 0x00 },
	{ 0x36, 0x49, 0x56, 0x20, 0x50, 0x00 },
	{ 0x00, 0x08, 0x07, 0x03, 0x00, 0x00 },
	{ 0x00, 0x1C, 0x22, 0x41, 0x00, 0x00 },
	{ 0x00, 0x41, 0x22, 0x1C, 0x00, 0x00 },
	{ 0x2A, 0x1C, 0x7F, 0x1C, 0x2A, 0x00 },
	{ 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00 },
	{ 0x00, 0x80, 0x70, 0x30, 0x00, 0x00 },
	{ 0x08, 0x08, 0x08, 0x08, 0x08, 0x00 },
	{ 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },
	{ 0x20, 0x10, 0x08, 0x04, 0x02, 0x00 },
	{ 0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00 },
	{ 0x00, 0x42, 0x7F, 0x40, 0x00, 0x00 },
	{ 0x72, 0x49, 0x49, 0x49, 0x46, 0x00 },
	{ 0x21, 0x41, 0x49, 0x4D, 0x33, 0x00 },
	{ 0x18, 0x14, 0x12, 0x7F, 0x10, 0x00 },
	{ 0x27, 0x45, 0x45, 0x45, 0x39, 0x00 },
	{ 0x3C, 0x4A, 0x49, 0x49, 0x31, 0x00 },
	{ 0x41, 0x21, 0x11, 0x09, 0x07, 0x00 },
	{ 0x36, 0x49, 0x49, 0x49, 0x36, 0x00 },
	{ 0x46, 0x49, 0x49, 0x29, 0x1E, 0x00 },
	{ 0x00, 0x00, 0x14, 0x00, 0x00, 0x00 },
	{ 0x00, 0x40, 0x34, 0x00, 0x00, 0x00 },
	{ 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },
	{ 0x14, 0x14, 0x14, 0x14, 0x14, 0x00 },
	{ 0x00, 0x41, 0x22, 0x14, 0x08, 0x00 },
	{ 0x02, 0x01, 0x59, 0x09, 0x06, 0x00 },
	{ 0x3E, 0x41, 0x5D, 0x59, 0x4E, 0x00 },
	{ 0x7C, 0x12, 0x11, 0x12, 0x7C, 0x00 },
	{ 0x7F, 0x49, 0x49, 0x49, 0x36, 0x00 },
	{ 0x3E, 0x41, 0x41, 0x41, 0x22, 0x00 },
	{ 0x7F, 0x41, 0x41, 0x41, 0x3E, 0x00 },
	{ 0x7F, 0x49, 0x49, 0x49, 0x41, 0x00 },
	{ 0x7F, 0x09, 0x09, 0x09, 0x01, 0x00 },
	{ 0x3E, 0x41, 0x41, 0x51, 0x73, 0x00 },
	{ 0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00 },
	{ 0x00, 0x41, 0x7F, 0x41, 0x00, 0x00 },
	{ 0x20, 0x40, 0x41, 0x3F, 0x01, 0x00 },
	{ 0x7F, 0x08, 0x14, 0x22, 0x41, 0x00 },
	{ 0x7F, 0x40, 0x40, 0x40, 0x40, 0x00 },
	{ 0x7F, 0x02, 0x1C, 0x02, 0x7F, 0x00 },
	{ 0x7F, 0x04, 0x08, 0x10, 0x7F, 0x00 },
	{ 0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00 },
	{ 0x7F, 0x09, 0x09, 0x09, 0x06, 0x00 },
	{ 0x3E, 0x41, 0x51, 0x21, 0x5E, 0x00 },
	{ 0x7F, 0x09, 0x19, 0x29, 0x46, 0x00 },
	{ 0x26, 0x49, 0x49, 0x49, 0x32, 0x00 },
	{ 0x03, 0x01, 0x7F, 0x01, 0x03, 0x00 },
	{ 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x00 },
	{ 0x1F, 0x20, 0x40, 0x20, 0x1F, 0x00 },
	{ 0x3F, 0x40, 0x38, 0x40, 0x3F, 0x00 },
	{ 0x63, 0x14, 0x08, 0x14, 0x63, 0x00 },
	{ 0x03, 0x04, 0x78, 0x04, 0x03, 0x00 },
	{ 0x61, 0x59, 0x49, 0x4D, 0x43, 0x00 },
	{ 0x00, 0x7F, 0x41, 0x41, 0x41, 0x00 },
	{ 0x02, 0x04, 0x08, 0x10, 0x20, 0x00 },
	{ 0x00, 0x41, 0x41, 0x41, 0x7F, 0x00 },
	{ 0x04, 0x02, 0x01, 0x02, 0x04, 0x00 },
	{ 0x40, 0x40, 0x40, 0x40, 0x40, 0x00 },
	{ 0x00, 0x03, 0x07, 0x08, 0x00, 0x00 },
	{ 0x20, 0x54, 0x54, 0x78, 0x40, 0x00 },
	{ 0x7F, 0x28, 0x44, 0x44, 0x38, 0x00 },
	{ 0x38, 0x44, 0x44, 0x44, 0x28, 0x00 },
	{ 0x38, 0x44, 0x44, 0x28, 0x7F, 0x00 },
	{ 0x38, 0x54, 0x54, 0x54, 0x18, 0x00 },
	{ 0x00, 0x08, 0x7E, 0x09, 0x02, 0x00 },
	{ 0x18, 0xA4, 0xA4, 0x9C, 0x78, 0x00 },
	{ 0x7F, 0x08, 0x04, 0x04, 0x78, 0x00 },
	{ 0x00, 0x44, 0x7D, 0x40, 0x00, 0x00 },
	{ 0x20, 0x40, 0x40, 0x3D, 0x00, 0x00 },
	{ 0x7F, 0x10, 0x28, 0x44, 0x00, 0x00 },
	{ 0x00, 0x41, 0x7F, 0x40, 0x00, 0x00 },
	{ 0x7C, 0x04, 0x78, 0x04, 0x78, 0x00 },
	{ 0x7C, 0x08, 0x04, 0x04, 0x78, 0x00 },
	{ 0x38, 0x44, 0x44, 0x44, 0x38, 0x00 },
	{ 0xFC, 0x18, 0x24, 0x24, 0x18, 0x00 },
	{ 0x18, 0x24, 0x24, 0x18, 0xFC, 0x00 },
	{ 0x7C, 0x08, 0x04, 0x04, 0x08, 0x00 },
	{ 0x48, 0x54, 0x54, 0x54, 0x24, 0x00 },
	{ 0x04, 0x04, 0x3F, 0x44, 0x24, 0x00 },
	{ 0x3C, 0x40, 0x40, 0x20, 0x7C, 0x00 },
	{ 0x1C, 0x20, 0x40, 0x20, 0x1C, 0x00 },
	{ 0x3C, 0x40, 0x30, 0x40, 0x3C, 0x00 },
	{ 0x44, 0x28, 0x10, 0x28, 0x44, 0x00 },
	{ 0x4C, 0x90, 0x90, 0x90, 0x7C, 0x00 },
	{ 0x44, 0x64, 0x54, 0x4C, 0x44, 0x00 },
	{ 0x00, 0x08, 0x36, 0x41, 0x00, 0x00 },
	{ 0x00, 0x00, 0x77, 0x00, 0x00, 0x00 },
	{ 0x00, 0x41, 0x36, 0x08, 0x00, 0x00 },
	{ 0x00, 0x06, 0x09, 0x06, 0x00, 0x00 },  // degree symbol = '~'
	{ 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00 }
};
void SPI_Init(){
	DDRB = (1<<MOSI)|(1<<CS)|(1<<DC)|(1<<SCK);
	PORTB = (PORTB|(1<<CS))|(1<<DC);
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
	SPSR &= ~(1<<SPI2X);
}
void SPI_WRITE(uint8_t data){
	char flush_buffer;
	SPDR = data;
	while(!(SPSR & (1<<SPIF)));	
	flush_buffer = SPDR;
}
void Start(){
	PORTB &= ~(1<<CS);
}
void END(){
	PORTB |= (1<<CS);
}
void Data(uint8_t data){
	Start();
	SPI_WRITE(data);
	END();
}
void Command(uint8_t cmd){
	PORTB &= ~(1<<DC);
	Data(cmd);
	PORTB |= (1<<DC);
}
void Command_multi(uint8_t cmd,uint8_t data1,uint8_t data2){
	Command(cmd);
	Data(data1>>8);
	Data(data1);
	Data(data2>>8);
	Data(data2);
}
void TFT_Init(){
	Command(0X01); //RESET
	_delay_ms(100);
	Command(0X11); // SLEEP OUT
	_delay_ms(200);
	Command(0X3A); //COLOR-MODE
	Data(0X55); //16BIT-MODE
	_delay_ms(200);
	Command(0X20+invert);//INVERT
	Command(0X36); //ORIENTATION
	Data(rotate<<5); 
	Command(0x29); // Display on
	_delay_ms(10);
}
unsigned int Colour (int r, int g, int b) {
	return (r & 0xf8)<<8 | (g & 0xfc)<<3 | b>>3; //DONT KNOW
}
void MoveTo (int x, int y) {
	x_origin = x; y_origin = y;
}
void PlotPoint (int x, int y) {
	Command_multi(CASET, yoff+y, yoff+y);
	Command_multi(RASET, xoff+x, xoff+x);
	Command(RAMWR); Data(FG>>8); Data(FG & 0xff);
}
void DrawTo (int x, int y) {
	int sx, sy, e2, err;
	int dx = abs(x - x_origin);
	int dy = abs(y - y_origin);
	if (x_origin < x) sx = 1; else sx = -1;
	if (y_origin < y) sy = 1; else sy = -1;
	err = dx - dy;
	for (;;) {
		PlotPoint(x_origin, y_origin);
		if (x_origin==x && y_origin==y) return;
		e2 = err<<1;
		if (e2 > -dy) { err = err - dy; x_origin = x_origin + sx; }
		if (e2 < dx) { err = err + dx; y_origin = y_origin + sy; }
	}
}
void PlotChar (char c) {
	int colour;
	Command_multi(CASET, yoff+y_origin, yoff+y_origin+8*font_size-1);
	Command_multi(RASET, xoff+x_origin, xoff+x_origin+6*font_size-1);
	Command(RAMWR);
	for (int xx=0; xx<6; xx++) {
		int bits = pgm_read_byte(&CharMap[c-32][xx]);
		for (int xr=0; xr<font_size; xr++) {
			for (int yy=0; yy<8; yy++) {
				if (bits>>(7-yy) & 1) colour = FG; else colour = BG;
				for (int yr=0; yr<font_size; yr++) {
					Data(colour>>8); Data(colour & 0xFF);
				}
			}
		}
	}
	x_origin = x_origin + 6*font_size;
}
void TestChart () {
	MoveTo(0,0);
	DrawTo(xsize-1, 0); DrawTo(xsize-1, ysize-1);
	DrawTo(0, ysize-1); DrawTo(0, 0);
	font_size=2;
	MoveTo((xsize-40)/2, (ysize-64)/2); PlotChar('F');
}


int main(void)
{
	SPI_Init();
	TFT_Init();
	TestChart();
    while (1) 
    {
    }
}
